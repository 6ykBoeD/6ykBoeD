using System;
using System.Collections.Generic;


namespace ConsoleApp2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Battlefield battlefield = new Battlefield();
            battlefield.Fight();
        }
    }

    class Country
    {
        private static Random _random = new Random();
        private List<Fighter> _fighters = new List<Fighter>();

        public void CreateTeam()
        {
            int numberFighters = 3;

            for (int i = 0; i < numberFighters; i++)
            {
                _fighters.Add(CreateFighter());
            }

            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.Write(i + 1 + " ");
                _fighters[i].ShowStats();
            }
        }

        public int GetCountFighters()
        {
            return _fighters.Count;
        }

        public Fighter GetFighter()
        {
            return _fighters[0];
        }

        public void DeleteFighter()
        {
            _fighters.RemoveAt(0);
        }

        private Fighter CreateFighter()
        {
            List<Fighter> _participants = new List<Fighter>()
            {
                new Warrior("Воин", 10, 200, 200, 10),
                new Mage("Маг", 15, 125, 125, 5),
                new Thief("Вор", 20, 150, 150, 0),
                new Archer("Лучник", 25, 120, 120, 0),
                new Knight("Рыцарь", 5, 250, 250, 15),
                new Priest("Прист", 10, 150, 150, 0),
                new Druid("Друид", 10, 150, 150, 10)
            };

            int index = _random.Next(_participants.Count);
            return _participants[index];
        }
    }

    abstract class Fighter
    {
        private string _name;

        public Fighter(string name, float damage, float hp, float maxHp, float armor)
        {
            _name = name;
            Damage = damage;
            Hp = hp;
            MaxHp = maxHp;
            Armor = armor;
        }

        public float Damage { get; protected set; }
        public float Hp { get; protected set; }
        public float MaxHp { get; protected set; }
        public float Armor { get; protected set; }

        public virtual void TakeDamage(float damage)
        {
            int percentageConverter = 100;
            Hp -= damage - damage / percentageConverter * Armor;
        }

        public virtual void Attack(Fighter enemyFighter)
        {
            enemyFighter.TakeDamage(Damage);
        }

        public void ShowStats()
        {
            Console.WriteLine($"{_name} -\t Здоровье = {Hp}; Урон = {Damage}; Броня = {Armor}");
        }
    }

    class Battlefield
    {
        private Country _red = new Country();
        private Country _blue = new Country();

        public void Fight()
        {
            ChooseFightersTeame();
            
            while (_red.GetCountFighters() > 0 && _blue.GetCountFighters() > 0)
            {
                Fighter redFighter = _red.GetFighter();
                Fighter blueFighter= _blue.GetFighter();
                Console.WriteLine();
                redFighter.Attack(blueFighter);
                blueFighter.Attack(redFighter);
                redFighter.ShowStats();

                if (redFighter.Hp <= 0)
                {
                    _red.DeleteFighter();
                }

                blueFighter.ShowStats();

                if (blueFighter.Hp <= 0)
                {
                    _blue.DeleteFighter();
                }
            }

            ShowWinner();
        }

        private void ChooseFightersTeame()
        {
            Console.WriteLine("\nСформировать команду красных");
            _red.CreateTeam();

            Console.WriteLine("\nСформировать команду синих");
            _blue.CreateTeam();
        }

        private void ShowWinner()
        {
            if (_red.GetCountFighters() <= 0 && _blue.GetCountFighters() <= 0)
            {
                Console.WriteLine("Ничья");
            }
            else if (_blue.GetCountFighters() <= 0)
            {
                Console.WriteLine("Победа Красной команды");
            }
            else if(_red.GetCountFighters() <= 0)
            {
                Console.WriteLine("Победа Синей команды");
            }
        }
    }

    class Warrior : Fighter
    {
        private float _rage = 0;
        private int _multiplierDamage = 4;

        public Warrior(string name, float hp, float damage, float armor, float maxHp) : base(name, hp, damage, armor, maxHp) { }

        public override void TakeDamage(float damage)
        {
            int percentageConverter = 100;
            base.TakeDamage(damage);
            _rage += damage - damage / percentageConverter * Armor;
        }

        public override void Attack(Fighter enemyFighter)
        {
            float damage;
            float mortalStrikeDamage;
            int lowHP = 2;
            int rageCost = 30;

            if (_rage >= rageCost && enemyFighter.Hp <= (enemyFighter.MaxHp / lowHP))
            {
                mortalStrikeDamage = Damage * _multiplierDamage;
                _rage -= rageCost;
                Console.WriteLine("<<<Воин наносит смертоностный удар>>>");
                damage = mortalStrikeDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
        }
    }

    class Mage : Fighter
    {
        private int _mana = 250;

        public Mage(string name, float hp, float damage, float armor, float maxHp) : base(name, hp, damage, armor, maxHp) { }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            float damage;
            int manaCost = 50;
            float fireBallDamage = 30;

            if (_mana >= manaCost)
            {
                _mana -= manaCost;
                Console.WriteLine("<<<Огненный шар>>>");
                damage = fireBallDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
            _mana += manaRegeneration;
        }
    }

    class Thief : Fighter
    {
        private int _evadeChance;
        private int _chanceInPercentage = 101;
        private Random _random = new Random();

        public Thief(string name, float hp, float damage, float armor, float maxHp) : base(name, hp, damage, armor, maxHp)
        {
            _evadeChance = _random.Next(_chanceInPercentage);
        }

        public override void Attack(Fighter enemyFighter)
        {
            enemyFighter.TakeDamage(Damage);
        }

        public override void TakeDamage(float damage)
        {
            int chance = 25;
            int evadeDamage = 0;
            int percentageConverter = 100;

            if (chance >= _evadeChance)
            {
                Console.WriteLine("<<<Уворот>>>");
                damage = evadeDamage;
            }
            else
            {
                Console.WriteLine("Попали");
                damage = Damage;
            }
            
            Hp -= damage - damage / percentageConverter * Armor;
        }
    }

    class Archer : Fighter
    {
        private float _weakPoint = 1.2f;

        public Archer(string name, float damage, float hp, float maxHp, float armor) : base(name, damage, hp, maxHp, armor) { }

        public override void Attack(Fighter enemyFighter)
        {
            UseSpecialAttack();
            enemyFighter.TakeDamage(Damage);
        }

        public void UseSpecialAttack()
        {
            Damage *= _weakPoint;
            Console.WriteLine("Урон повышен");
        }
    }

    class Knight : Fighter
    {
        private int _essenceLight = 100;

        public Knight(string name, float damage, float hp, float maxHp, float armor) : base(name, damage, hp, maxHp, armor) { }

        public override void Attack(Fighter enemyFighter)
        {
            int essenceLightRegeneration = 20;
            int lightCost = 50;
            int heal = 5;
            int lightStrike = 30;
            float damage = Damage;

            if (lightCost >= _essenceLight)
            {
                damage = lightStrike;

                if (MaxHp < Hp)
                {
                    Hp += heal;
                }
            }

            _essenceLight += essenceLightRegeneration;
            enemyFighter.TakeDamage(damage);
        }
    }

    class Priest : Fighter
    {
        private int _count;
        private int _mana = 250;

        public Priest(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP)
        {
            _count = 1;
        }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            UseInnerFire();
            enemyFighter.TakeDamage(Damage);
            Heal();
            _mana += manaRegeneration;
        }

        private void Heal()
        {
            float limitHp = 0.8f;
            float healthThreshold = limitHp * MaxHp;
            int manaCost = 50;
            int heal = 10;

            if (_mana >= manaCost && Hp <= healthThreshold)
            {
                Hp += heal;
                _mana -= manaCost;
                Console.WriteLine("<<<Лечение>>>");
            }
        }

        private void UseInnerFire()
        {
            int manaCost = 10;
            int increeseArmor = 30;
            float minLimitHP = 0.2f;
            float lowHP = minLimitHP * MaxHp;

            if (_count == 1 && Hp <= lowHP && _mana >= manaCost)
            {
                Armor += increeseArmor;
                _mana -= manaCost;
                _count = 0;
                Console.WriteLine("<<<Броня повышена>>>");
            }
        }
    }

    class Druid : Fighter
    {
        private int _countTransformation = 1;

        public Druid(string name, float hp, float damage, float armor, float maxHp) : base(name, hp, damage, armor, maxHp) { }

        public override void Attack(Fighter enemyFighter)
        {
            float increeseDamage = 2;
            float increeseHP = 1.5f;
            float increeseArmor = 1.5f;

            for (int i = 0; i < _countTransformation; i++)
            {
                Console.WriteLine("<<<Облик медведя>>>");
                Hp *= increeseHP;
                Damage *= increeseDamage;
                Armor *= increeseArmor;
                _countTransformation = 0;
            }

            enemyFighter.TakeDamage(Damage);
        }
    }
}
