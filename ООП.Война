using System;
using System.Collections.Generic;


namespace ConsoleApp2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Battlefield battlefield = new Battlefield();
            battlefield.Fight();
        }
    }

    class Country
    {
        static private Random _random = new Random();
        private List<Fighter> _fighterList = new List<Fighter>();

        public void CreateTeam(Country country)
        {
            int numberFighters = 3;
            int index = 6;

            for (int i = 0; i < numberFighters; i++)
            {
                country._fighterList.Add(CreateFighter(_random.Next(index)));
            }

            for (int i = 0; i < country._fighterList.Count; i++)
            {
                Console.Write(i + 1 + " ");
                country._fighterList[i].ShowStats();
            }
        }

        public int ShowCountFighters()
        {
            return _fighterList.Count;
        }

        public Fighter GetFighter()
        {
            return _fighterList[0];
        }

        public void DeleteFighter()
        {
            _fighterList.RemoveAt(0);
        }

        private Fighter CreateFighter(int index)
        {
            switch (index)
            {
                case 0:
                    Warrior warrior = new Warrior("Воин", 10, 200, 200, 10);
                    return warrior;
                case 1:
                    Mage mage = new Mage("Маг", 15, 125, 125, 5);
                    return mage;
                case 2:
                    Thief thief = new Thief("Вор", 20, 150, 150, 0);
                    return thief;
                case 3:
                    Archer archer = new Archer("Лучник", 25, 120, 120, 0);
                    return archer;
                case 4:
                    Knight knight = new Knight("Рыцарь", 5, 250, 250, 15);
                    return knight;
                case 5:
                    Priest priest = new Priest("Прист", 10, 150, 150, 0);
                    return priest;
                case 6:
                    Druid druid = new Druid("Друид", 10, 150, 150, 10);
                    return druid;
            }
            
            return null;
        }
    }

    abstract class Fighter
    {
        private string _name;
        public float Damage { get; protected set; }
        public float HP { get; protected set; }
        public float MaxHP { get; protected set; }
        public float Armor { get; protected set; }

        public Fighter(string name, float damage, float hP, float maxhP, float armor)
        {
            _name = name;
            Damage = damage;
            HP = hP;
            MaxHP = maxhP;
            Armor = armor;
        }

        public virtual void TakeDamage(float damage)
        {
            HP -= damage - damage / 100 * Armor;
        }

        public virtual void Attack(Fighter enemyFighter)
        {
            enemyFighter.TakeDamage(Damage);
        }

        public void ShowStats()
        {
            Console.WriteLine($"{_name} -\t Здоровье = {HP}; Урон = {Damage}; Броня = {Armor}");
        }
    }

    class Battlefield
    {
        private Country _red = new Country();
        private Country _blue = new Country();

        public void Fight()
        {
            ChoiseFightersTeame();

            while (_red.ShowCountFighters() > 0 && _blue.ShowCountFighters() > 0)
            {
                Console.WriteLine();
                _red.GetFighter().Attack(_blue.GetFighter());
                _blue.GetFighter().Attack(_red.GetFighter());
                _red.GetFighter().ShowStats();

                if (_red.GetFighter().HP <= 0)
                {
                    _red.DeleteFighter();
                }

                _blue.GetFighter().ShowStats();

                if (_blue.GetFighter().HP <= 0)
                {
                    _blue.DeleteFighter();
                }
            }

            ShowWinner();
        }

        private void ChoiseFightersTeame()
        {
            Console.WriteLine("\nСформировать команду красных");
            _red.CreateTeam(_red);

            Console.WriteLine("\nСформировать команду синих");
            _blue.CreateTeam(_blue);
        }

        private void ShowWinner()
        {
            if (_red.ShowCountFighters() <= 0)
            {
                Console.WriteLine("Победа Синей команды");
            }
            else if (_blue.ShowCountFighters() <= 0)
            {
                Console.WriteLine("Победа Красной команды");
            }
            else
            {
                Console.WriteLine("Ничья");
            }
        }
    }

    class Warrior : Fighter
    {
        private float _rage = 0;
        private int _multiplierDamage = 4;

        public Warrior(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void TakeDamage(float damage)
        {
            base.TakeDamage(damage);
            _rage += damage - damage / 100 * Armor;
        }

        public override void Attack(Fighter enemyFighter)
        {
            float damage;
            float mortalStrikeDamage;
            int lowHP = 2;
            int rageCost = 30;

            if (_rage >= rageCost && enemyFighter.HP <= (enemyFighter.MaxHP / lowHP))
            {
                mortalStrikeDamage = Damage * _multiplierDamage;
                _rage -= rageCost;
                Console.WriteLine("<<<Воин наносит смертоностный удар>>>");
                damage = mortalStrikeDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
        }
    }

    class Mage : Fighter
    {
        private int _mana = 250;

        public Mage(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            float damage;
            int manaCost = 50;
            float fireBallDamage = 30;

            if (_mana >= manaCost)
            {
                _mana -= manaCost;
                Console.WriteLine("<<<Огненный шар>>>");
                damage = fireBallDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
            _mana += manaRegeneration;
        }
    }

    class Thief : Fighter
    {
        private int _evadeShance;
        private Random _random = new Random();

        public Thief(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP)
        {
            _evadeShance = _random.Next(101);
        }

        public override void Attack(Fighter enemyFighter)
        {
            enemyFighter.TakeDamage(Damage);
        }

        public override void TakeDamage(float damage)
        {
            int chance = 25;
            int evadeDamage = 0;

            if (chance >= _evadeShance)
            {
                Console.WriteLine("<<<Уворот>>>");
                damage = evadeDamage;
            }
            else
            {
                Console.WriteLine("Попали");
                damage = Damage;
            }

            HP -= damage - damage / 100 * Armor;
        }
    }

    class Archer : Fighter
    {
        private float _weakPoint = 1.2f;

        public Archer(string name, float damage, float hp, float maxHP, float armor) : base(name, damage, hp, maxHP, armor) { }

        public override void Attack(Fighter enemyFighter)
        {
            Damage *= _weakPoint;
            enemyFighter.TakeDamage(Damage);
        }
    }

    class Knight : Fighter
    {
        private int _essenceLight = 100;

        public Knight(string name, float damage, float hp, float maxHP, float armor) : base(name, damage, hp, maxHP, armor) { }

        public override void Attack(Fighter enemyFighter)
        {
            int essenceLightRegeneration = 20;
            int lightCost = 50;
            int heal = 5;
            int lightStrike = 30;
            float damage = Damage;

            if (lightCost >= _essenceLight)
            {
                damage = lightStrike;

                if (MaxHP < HP)
                {
                    HP += heal;
                }
            }

            _essenceLight += essenceLightRegeneration;
            enemyFighter.TakeDamage(damage);
        }
    }

    class Priest : Fighter
    {
        private int _count;
        private int _mana = 250;

        public Priest(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP)
        {
            _count = 1;
        }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            UseInnerFire();
            enemyFighter.TakeDamage(Damage);
            Heal();
            _mana += manaRegeneration;
        }

        private void Heal()
        {
            float limitHP = 0.8f;
            float healthThreshold = limitHP * MaxHP;
            int manaCost = 50;
            int heal = 10;

            if (_mana >= manaCost && HP <= healthThreshold)
            {
                HP += heal;
                _mana -= manaCost;
                Console.WriteLine("<<<Лечение>>>");
            }
        }

        private void UseInnerFire()
        {
            int manaCost = 10;
            int increeseArmor = 30;
            float minLimitHP = 0.2f;
            float lowHP = minLimitHP * MaxHP;

            if (_count == 1 && HP <= lowHP && _mana >= manaCost)
            {
                Armor += increeseArmor;
                _mana -= manaCost;
                _count = 0;
                Console.WriteLine("<<<Броня повышена>>>");
            }
        }
    }

    class Druid : Fighter
    {
        private int _countTransformation = 1;

        public Druid(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            float increeseDamage = 2;
            float increeseHP = 1.5f;
            float increeseArmor = 1.5f;

            for (int i = 0; i < _countTransformation; i++)
            {
                Console.WriteLine("<<<Облик медведя>>>");
                HP *= increeseHP;
                Damage *= increeseDamage;
                Armor *= increeseArmor;
                _countTransformation = 0;
            }

            enemyFighter.TakeDamage(Damage);
        }
    }
}
