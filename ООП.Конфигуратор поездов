using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            RailwayStation railwayStation = new RailwayStation();
            bool isWork = true;
            int positionY = 1;
            const string CreateDirection = "1";
            const string SendTrain = "2";
            const string CommandExit = "3";

            while (isWork)
            {
                railwayStation.ShowInfo(positionY);
                Console.SetCursorPosition(0, 10);
                Console.WriteLine($"Выберите действие :\n1 - Создать направление\n2 - Отправить поезд\n3 - Выйти из программы");

                switch (Console.ReadLine())
                {
                    case CreateDirection:
                        railwayStation.CreateTrip();
                        break;

                    case SendTrain:
                        railwayStation.SendTrain();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;
                }

                Console.Clear();
            }
        }
    }

    class Destination
    {
        private static int _ids;

        public int Id { get; private set; }
        public string Name { get; private set; }

        public Destination(string name)
        {
            Id = ++_ids;
            Name = name;
        }
    }

    class RailwayStation
    {
        private List<Cell> _destinations = new List<Cell>();
        private  Random _random = new Random();
        private int _minCount = 1;
        private int _maxCount = 500;

        public void CreateTrip()
        {
            Console.WriteLine("\nПункт отправления");
            string departure = Console.ReadLine();

            Console.WriteLine("\nПункт назначения");
            string destinationPoint = Console.ReadLine();
            string nameTrip = $"{departure} - {destinationPoint}";

            string сondition = "Готов к отправке";

            int countPassenger = _random.Next(_minCount, _maxCount);
            _destinations.Add(new Cell(new Destination(nameTrip), new Train(countPassenger),countPassenger, сondition));
        }

        private int GetNumber()
        {
            bool isWork = true;

            while (isWork)
            {
                bool isSuccess = int.TryParse(Console.ReadLine(), out int count);

                if (isSuccess)
                {
                    return count;
                }
                else
                {
                    Console.WriteLine("Неверное значение");
                }
            }

            return 0;
        }

        public void SendTrain()
        {
            Console.WriteLine("Выберите номер поезда который хотите отправить");
            int number = GetNumber();

            if (_destinations.Count > 0)
            {
                for (int i = 0; i < _destinations.Count; i++)
                {
                    if (number == _destinations[i].Destination.Id)
                    {
                        _destinations[i].ChangeCondition();
                    }
                }
            }
            else
            {
                Console.WriteLine("Отправления нет");
            }
        }

        public void ShowInfo(int positionY)
        {
            Console.WriteLine("Поезд №\t Отправление\t\tПассажиров\tКол. вагонов\tГотовность");

            foreach (var destination in _destinations)
            {
                Console.SetCursorPosition(0, positionY);
                Console.Write($"{destination.Destination.Id}");
                Console.SetCursorPosition(9, positionY);
                Console.Write($"{destination.Destination.Name}");
                Console.SetCursorPosition(32, positionY);
                Console.Write($"{destination.CountPassanger}");
                Console.SetCursorPosition(48, positionY);
                Console.Write($"{destination.Train.CountWagon}");
                Console.SetCursorPosition(64, positionY);
                Console.Write($"{destination.Condition}");
                ++positionY;
            }
        }
    }

    class Train
    {
        private int _countOfSeats = 56;

        public int CountWagon { get; private set; }

        public Train(int countPassenger)
        {
            if (countPassenger % _countOfSeats == 0)
            {
                CountWagon = countPassenger / _countOfSeats;
            }
            else
            {
                CountWagon = countPassenger / _countOfSeats + 1;
            }
        }
    }

    class Cell
    {
        public Destination Destination { get; private set; }
        public Train Train { get; private set; }
        public int CountPassanger { get; private set; }
        public string Condition { get; private set; }

        public Cell(Destination destination, Train train,int countPassanger, string сondition)
        {
            Destination = destination;
            CountPassanger = countPassanger;
            Condition = сondition;
            Train = train;
        }
        public void ChangeCondition()
        {
            Condition = "в пути";
        }
    }
}
