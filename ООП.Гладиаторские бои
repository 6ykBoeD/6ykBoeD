using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Fight();
        }
    }

    class Fighter
    {
        protected Random Random = new Random();
        public float Armor { get; protected set; }
        public float HP { get; protected set; }
        public float MaxHP { get; protected set; }
        public float Damage { get; protected set; }
        public string Name { get; private set; }

        public Fighter(string name, float hp, float damage, float armor, float maxHP)
        {
            Name = name;
            HP = hp;
            Damage = damage;
            Armor = armor;
            MaxHP = maxHP;
        }

        public virtual void TakeDamage(float damage)
        {
            HP -= damage - damage / 100 * Armor;
        }

        public virtual void Attack(Fighter enemyFighter) { }

        public void ShowStats()
        {
            Console.WriteLine($"{Name} -\t Здоровье = {HP}; Урон = {Damage}; Броня = {Armor}");
        }
    }

    class Warrior : Fighter
    {
        private float _rage = 0;
        private int _multiplierDamage = 4;

        public Warrior(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void TakeDamage(float damage)
        {
            base.TakeDamage(damage);
            _rage += damage - damage / 100 * Armor;
        }

        public override void Attack(Fighter enemyFighter)
        {
            float damage;
            float mortalStrikeDamage;
            int lowHP = 2;
            int rageCost = 30;

            if (_rage >= rageCost && enemyFighter.HP <= (enemyFighter.MaxHP / lowHP))
            {
                mortalStrikeDamage = Damage * _multiplierDamage;
                _rage -= rageCost;
                Console.WriteLine("<<<Воин наносит смертоностный удар>>>");
                damage = mortalStrikeDamage;
            }
            else
            {
               damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
        }
    }

    class Mage : Fighter
    {
        private int _mana = 250;
        public Mage(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            float damage;
            int manaCost = 50;
            float fireBallDamage = 30;

            if (_mana >= manaCost)
            {
                _mana -= manaCost;
                Console.WriteLine("<<<Огненный шар>>>");
                damage = fireBallDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
            _mana += manaRegeneration;
        }
    }

    class Druid : Fighter
    {
        public Druid(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            float increeseDamage = 2 * Damage;
            float increeseHP = 1.5f * HP;
            float increeseArmor = 1.5f * Armor;

            Console.WriteLine("<<<Облик медведя>>>");
            HP = increeseHP;
            Damage = increeseDamage;
            Armor = increeseArmor;
            enemyFighter.TakeDamage(Damage);
        }
    }

    class Thief : Fighter
    {
        private int _evadeShance = 3;
        public Thief(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            float damage;
            int chance = Random.Next(1, 4);
            int evadeDamage = 0;

            if (chance == _evadeShance)
            {
                Console.WriteLine("<<<Уворот>>>");
                damage = evadeDamage;
            }
            else
            {
                damage = Damage;
            }

            enemyFighter.TakeDamage(damage);
        }
    }

    class Priest : Fighter
    {
        private int _mana = 250;
        public Priest(string name, float hp, float damage, float armor, float maxHP) : base(name, hp, damage, armor, maxHP) { }

        public override void Attack(Fighter enemyFighter)
        {
            int manaRegeneration = 10;
            UseInnerFire();
            enemyFighter.TakeDamage(Damage);
            Heal();
            _mana += manaRegeneration;
        }

        private void Heal()
        {
            float healthThreshold = 0.8f * MaxHP;
            int manaCost = 50;
            int heal = 10;

            if (_mana >= manaCost && HP <= healthThreshold)
            {
                HP += heal;
                _mana -= manaCost;
                Console.WriteLine("<<<Лечение>>>");
            }
        }

        private void UseInnerFire()
        {
            int count = 1;
            int manaCost = 10;
            float lowHP = 0.2f * MaxHP;

            if (count == 1 && HP <= lowHP)
            {
                Armor += 30;
                _mana -= manaCost;
                Console.WriteLine("<<<Броня повышена>>>");
            }
        }
    }

    class Arena
    {
        private Fighter _firstFighter;
        private Fighter _secondFighter;
        private List<Fighter> _listFighters;

        public Arena()
        {
            _listFighters = new List<Fighter>() {
            new Warrior("Воин",250,20,10,250),
            new Mage("Маг",150,20,5,150),
            new Druid("Друид",150,10,10,150),
            new Thief("Депутат",125,20,5,125),
            new Priest("Прист", 100,15,8,100)};
        }

        public void Fight()
        {
            for (int i = 0; i < _listFighters.Count; i++)
            {
                Console.Write(i + 1 + " ");
                _listFighters[i].ShowStats();
            }
            
            Console.WriteLine();
            Console.WriteLine("Выберите первого бойца :");
            _firstFighter = CreatFighter(GetIndex());

            Console.WriteLine("Выберите второго бойца :");
            _secondFighter = CreatFighter(GetIndex());

            while (_firstFighter.HP > 0 && _secondFighter.HP > 0)
            {
                Console.WriteLine();

                _firstFighter.Attack(_secondFighter);
                _secondFighter.Attack(_firstFighter);

                _firstFighter.ShowStats();
                _secondFighter.ShowStats();
            }

            if (_firstFighter.HP <= 0 && _secondFighter.HP <= 0)
            {
                Console.WriteLine("Оба бойца погибли!");
            }
            else if (_secondFighter.HP <= 0)
            {
                Console.WriteLine($"Победил {_firstFighter.Name}");
            }
            else if (_firstFighter.HP <= 0)
            {
                Console.WriteLine($"Победил {_secondFighter.Name}");
            }

            Console.ReadKey();
        }

        private Fighter CreatFighter(int index)
        {
            List<Fighter> fighters = new List<Fighter>() {
            new Warrior("Воин",250,20,10,250),
            new Mage("Маг",150,20,5,150),
            new Druid("Друид",150,10,10,150),
            new Thief("Депутат",125,20,5,125),
            new Priest("Прист", 100,15,8,100)};

            return fighters[index - 1];
        }

        private int GetIndex()
        {
            bool isTrue = true;

            while (isTrue)
            {
                bool isSuccess = int.TryParse(Console.ReadLine(), out int count);

                if (isSuccess)
                {
                    if ( count <= _listFighters.Count && count > 0)
                    {
                        return count;
                    }
                    else
                    {
                        Console.WriteLine("Бойца под таким номером нет");
                    }
                    
                }
                else
                {
                    Console.WriteLine("Неверное значение");
                }
            }

            return 0;
        }
    }
}
 
