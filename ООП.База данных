namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Database players = new Database();
            Console.WriteLine("1 - для добавления игрока\n2 - для бана игрока\n3 - для разблокировки игрока\n4 - для удаления игрока\n5 - показать информацию о игроках\n6 - для выходи из программы");
            bool isRepeat = true;

            while (isRepeat)
            {
                Console.WriteLine("Выберите действие");
                switch (Console.ReadLine())
                {
                    case "1":
                        players.AddPlayer();
                        break;

                        case "2":
                        players.BanPlayer();
                        break;

                    case "3":
                        players.UnBanPlayer();
                        break;

                    case "4":
                        players.DeletePlayer();
                        break;
                        
                    case "5":
                        players.ShowInfo();
                        break;

                    case "6":
                        isRepeat = false;
                        break;

                }
            }
        }
    }

    class Player
    {
        public bool IsBan;
        private static int _ids ;
        public string Name { get; private set; }
        public int Level { get; private set; }
        public int Id { get; private set; }

        public Player(string name , int level , bool isBan = false)
        {
            Id = ++_ids;
            Name = name;
            Level = level;
            IsBan = isBan;
        }
    }

    class Database
    {
        private List<Player> players = new List<Player>();

        public void AddPlayer()
        {
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine("Введите имя :");
                string name = Console.ReadLine();
                Console.WriteLine("Какой уровень :");
                int level;
                bool isSucces = int.TryParse(Console.ReadLine(), out level);

                if (isSucces == true)
                {
                    players.Add(new Player(name, level));
                    isWork = false;
                }
                else
                {
                    Console.WriteLine("Попробуйте снова");
                }
            }    
        }

        public void ShowInfo()
        {
            for (int i = 0; i < players.Count; i++)
            {
                if (players[i].IsBan == false)
                {
                    Console.WriteLine($"id - {players[i].Id},Имя - {players[i].Name},Уровень - {players[i].Level}\n");
                }
            }
        }

        public void BanPlayer()
        {
            if (TryGetPlayer(players))
            {
                bool isWork = true;

                while (isWork)
                {
                    Console.WriteLine("Введиет номер Id для бана игрока :");
                    int numberId;
                    bool isSucces = int.TryParse(Console.ReadLine(), out numberId);

                    if (isSucces == true)
                    {
                        players[numberId - 1].IsBan = true;
                        isWork = false;
                    }
                    else
                    {
                        Console.WriteLine("Попробуйте снова");
                    }
                }
            }
        }

        public void UnBanPlayer()
        {
            if (TryGetPlayer(players))
            {
                bool isWork = true;

                while (isWork)
                {
                    Console.WriteLine("Введиет номер Id разблокировки игрока :");
                    int numberId;
                    bool isSucces = int.TryParse(Console.ReadLine(), out numberId);

                    if (isSucces == true)
                    {
                        players[numberId - 1].IsBan = false;
                        isWork = false;
                    }
                    else
                    {
                        Console.WriteLine("Попробуйте снова");
                    }
                }
            }
        }

        public void DeletePlayer()
        {
            if (TryGetPlayer(players))
            {
                bool isWork = true;

                while (isWork)
                {
                    Console.WriteLine("Введите номер Id для удаления игрока ");
                    int numberId;
                    bool isSucces = int.TryParse(Console.ReadLine(), out numberId);

                    if (isSucces == true)
                    {
                        players.RemoveAt(numberId - 1);
                        isWork = false;
                    }
                    else
                    {
                        Console.WriteLine("Попробуйте снова");
                    }
                }
            }
        }

        private bool TryGetPlayer(List<Player> players)
        {
            return players.Count > 0;
        }
    }
}
